
AvrCalcSource.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000788  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000788  0000081c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cd  0080007a  0080007a  00000836  2**0
                  ALLOC
  3 .stab         000020c4  00000000  00000000  00000838  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000848  00000000  00000000  000028fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00003144  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001f8  00000000  00000000  00003173  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001642  00000000  00000000  0000336b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000734  00000000  00000000  000049ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000009eb  00000000  00000000  000050e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000068c  00000000  00000000  00005acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000890  00000000  00000000  00006158  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d30  00000000  00000000  000069e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000198  00000000  00000000  00007718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

double numbersMul(double first,double second){
	return first*second;
}

double numbersDiv(double first,double second){
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	if(second != 0){
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 96 03 	jmp	0x72c	; 0x72c <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
		return first/second;
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
	}
	return -0.12345;
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
}
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 34       	cpi	r26, 0x47	; 71
  82:	b2 07       	cpc	r27, r18
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  8a:	0c 94 c2 03 	jmp	0x784	; 0x784 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_ZN7KeyItem6getValEv>:
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <_ZN7KeyItem6getValEv+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	9a 83       	std	Y+2, r25	; 0x02
  9e:	89 83       	std	Y+1, r24	; 0x01
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	9a 81       	ldd	r25, Y+2	; 0x02
  a4:	fc 01       	movw	r30, r24
  a6:	80 81       	ld	r24, Z
  a8:	0f 90       	pop	r0
  aa:	0f 90       	pop	r0
  ac:	df 91       	pop	r29
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <_ZN7KeyItem5getIdEv>:
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
  b6:	00 d0       	rcall	.+0      	; 0xb8 <_ZN7KeyItem5getIdEv+0x6>
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	9a 83       	std	Y+2, r25	; 0x02
  be:	89 83       	std	Y+1, r24	; 0x01
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	9a 81       	ldd	r25, Y+2	; 0x02
  c4:	fc 01       	movw	r30, r24
  c6:	81 81       	ldd	r24, Z+1	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c8:	0f 90       	pop	r0
  ca:	0f 90       	pop	r0
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <main>:
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	6a 97       	sbiw	r28, 0x1a	; 26
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	f8 94       	cli
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	0f be       	out	0x3f, r0	; 63
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
  e4:	cd bf       	out	0x3d, r28	; 61
  e6:	ce 01       	movw	r24, r28
  e8:	06 96       	adiw	r24, 0x06	; 6
  ea:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN18KeyboardControllerC1Ev>
  ee:	8a e0       	ldi	r24, 0x0A	; 10
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	9c 83       	std	Y+4, r25	; 0x04
  f4:	8b 83       	std	Y+3, r24	; 0x03
  f6:	84 e1       	ldi	r24, 0x14	; 20
  f8:	e6 e6       	ldi	r30, 0x66	; 102
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	de 01       	movw	r26, r28
  fe:	17 96       	adiw	r26, 0x07	; 7
 100:	01 90       	ld	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	8a 95       	dec	r24
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x2e>
 108:	1a 82       	std	Y+2, r1	; 0x02
 10a:	19 82       	std	Y+1, r1	; 0x01
 10c:	1f c0       	rjmp	.+62     	; 0x14c <main+0x7a>
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	9a 81       	ldd	r25, Y+2	; 0x02
};

void LCD_Initalize(void)
{
	_delay_ms(20);
	for(int i=0;i<3;++i){
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	9e 01       	movw	r18, r28
		WriteNibble(0x03);
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	3f 4f       	sbci	r19, 0xFF	; 255
 11c:	82 0f       	add	r24, r18
 11e:	93 1f       	adc	r25, r19
 120:	06 96       	adiw	r24, 0x06	; 6
 122:	fc 01       	movw	r30, r24
 124:	20 81       	ld	r18, Z
 126:	31 81       	ldd	r19, Z+1	; 0x01
 128:	ce 01       	movw	r24, r28
 12a:	06 96       	adiw	r24, 0x06	; 6
 12c:	b9 01       	movw	r22, r18
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 12e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN18KeyboardController11setKeyValueEi>
 132:	ce 01       	movw	r24, r28
 134:	05 96       	adiw	r24, 0x05	; 5
 136:	0e 94 b0 00 	call	0x160	; 0x160 <_Z14readPressedKey18KeyboardController>
 13a:	ce 01       	movw	r24, r28
 13c:	05 96       	adiw	r24, 0x05	; 5
 13e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN18KeyboardControllerD1Ev>
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	9a 81       	ldd	r25, Y+2	; 0x02
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	9a 83       	std	Y+2, r25	; 0x02
 14a:	89 83       	std	Y+1, r24	; 0x01
 14c:	21 e0       	ldi	r18, 0x01	; 1
	if (__tmp < 1.0)
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	9a 81       	ldd	r25, Y+2	; 0x02
 152:	8a 30       	cpi	r24, 0x0A	; 10
 154:	91 05       	cpc	r25, r1
 156:	0c f0       	brlt	.+2      	; 0x15a <main+0x88>
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	22 23       	and	r18, r18
 15c:	c1 f6       	brne	.-80     	; 0x10e <main+0x3c>
 15e:	ff cf       	rjmp	.-2      	; 0x15e <main+0x8c>

00000160 <_Z14readPressedKey18KeyboardController>:
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	00 d0       	rcall	.+0      	; 0x166 <_Z14readPressedKey18KeyboardController+0x6>
		__ticks = 1;
 166:	00 d0       	rcall	.+0      	; 0x168 <_Z14readPressedKey18KeyboardController+0x8>
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	9c 83       	std	Y+4, r25	; 0x04
 16e:	8b 83       	std	Y+3, r24	; 0x03
	else if (__tmp > 65535)
 170:	8b 81       	ldd	r24, Y+3	; 0x03
 172:	9c 81       	ldd	r25, Y+4	; 0x04
 174:	0e 94 fe 01 	call	0x3fc	; 0x3fc <_ZN18KeyboardController21readValueFromKeyboardEv>
 178:	9a 83       	std	Y+2, r25	; 0x02
 17a:	89 83       	std	Y+1, r24	; 0x01
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	9a 81       	ldd	r25, Y+2	; 0x02
 180:	0e 94 c9 00 	call	0x192	; 0x192 <_Z13appendKeyItem7KeyItem>
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <_Z13appendKeyItem7KeyItem>:
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	00 d0       	rcall	.+0      	; 0x19c <_Z13appendKeyItem7KeyItem+0xa>
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	9a 83       	std	Y+2, r25	; 0x02
 1a2:	89 83       	std	Y+1, r24	; 0x01
 1a4:	ce 01       	movw	r24, r28
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	0e 94 59 00 	call	0xb2	; 0xb2 <_ZN7KeyItem5getIdEv>
 1ac:	98 2f       	mov	r25, r24
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	91 30       	cpi	r25, 0x01	; 1
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <_Z13appendKeyItem7KeyItem+0x24>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	88 23       	and	r24, r24
 1b8:	09 f1       	breq	.+66     	; 0x1fc <_Z13appendKeyItem7KeyItem+0x6a>
 1ba:	90 91 fa 00 	lds	r25, 0x00FA
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	89 27       	eor	r24, r25
 1c2:	88 23       	and	r24, r24
 1c4:	49 f0       	breq	.+18     	; 0x1d8 <_Z13appendKeyItem7KeyItem+0x46>
 1c6:	80 91 60 00 	lds	r24, 0x0060
 1ca:	90 91 61 00 	lds	r25, 0x0061
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	90 93 61 00 	sts	0x0061, r25
 1d4:	80 93 60 00 	sts	0x0060, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d8:	00 91 60 00 	lds	r16, 0x0060
 1dc:	10 91 61 00 	lds	r17, 0x0061
 1e0:	ce 01       	movw	r24, r28
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	0e 94 49 00 	call	0x92	; 0x92 <_ZN7KeyItem6getValEv>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1e8:	28 2f       	mov	r18, r24
 1ea:	c8 01       	movw	r24, r16
 1ec:	86 58       	subi	r24, 0x86	; 134
 1ee:	9f 4f       	sbci	r25, 0xFF	; 255
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 83       	st	Z, r18
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	80 93 fa 00 	sts	0x00FA, r24
 1fa:	25 c0       	rjmp	.+74     	; 0x246 <_Z13appendKeyItem7KeyItem+0xb4>
 1fc:	ce 01       	movw	r24, r28
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	0e 94 59 00 	call	0xb2	; 0xb2 <_ZN7KeyItem5getIdEv>
 204:	98 2f       	mov	r25, r24
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	95 30       	cpi	r25, 0x05	; 5
 20a:	09 f0       	breq	.+2      	; 0x20e <_Z13appendKeyItem7KeyItem+0x7c>
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	88 23       	and	r24, r24
 210:	d1 f0       	breq	.+52     	; 0x246 <_Z13appendKeyItem7KeyItem+0xb4>
 212:	80 91 60 00 	lds	r24, 0x0060
};

void LCD_Initalize(void)
{
	_delay_ms(20);
	for(int i=0;i<3;++i){
 216:	90 91 61 00 	lds	r25, 0x0061
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	90 93 61 00 	sts	0x0061, r25
 220:	80 93 60 00 	sts	0x0060, r24
 224:	00 91 60 00 	lds	r16, 0x0060
 228:	10 91 61 00 	lds	r17, 0x0061
 22c:	ce 01       	movw	r24, r28
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	0e 94 49 00 	call	0x92	; 0x92 <_ZN7KeyItem6getValEv>
		WriteNibble(0x03);
		_delay_ms(10);
	}
	WriteNibble(0x02);
 234:	28 2f       	mov	r18, r24
 236:	c8 01       	movw	r24, r16
 238:	86 58       	subi	r24, 0x86	; 134
 23a:	9f 4f       	sbci	r25, 0xFF	; 255
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
 240:	10 92 fa 00 	sts	0x00FA, r1
 244:	00 00       	nop
 246:	0f 90       	pop	r0
 248:	0f 90       	pop	r0
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	08 95       	ret

00000254 <_ZN7KeyItemC1Ev>:
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	00 d0       	rcall	.+0      	; 0x25a <_ZN7KeyItemC1Ev+0x6>
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	9a 83       	std	Y+2, r25	; 0x02
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
	if (__tmp < 1.0)
 26a:	08 95       	ret

0000026c <_ZN11KeyOperatorC1Ec>:
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	00 d0       	rcall	.+0      	; 0x272 <_ZN11KeyOperatorC1Ec+0x6>
 272:	1f 92       	push	r1
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	9a 83       	std	Y+2, r25	; 0x02
 27a:	89 83       	std	Y+1, r24	; 0x01
 27c:	6b 83       	std	Y+3, r22	; 0x03
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	9a 81       	ldd	r25, Y+2	; 0x02
		__ticks = 1;
 282:	0e 94 2a 01 	call	0x254	; 0x254 <_ZN7KeyItemC1Ev>
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	9a 81       	ldd	r25, Y+2	; 0x02
 28a:	2b 81       	ldd	r18, Y+3	; 0x03
	else if (__tmp > 65535)
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	9a 81       	ldd	r25, Y+2	; 0x02
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	fc 01       	movw	r30, r24
 298:	21 83       	std	Z+1, r18	; 0x01
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2a4:	08 95       	ret

000002a6 <_ZN11KeyOperatorD1Ev>:
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <_ZN11KeyOperatorD1Ev+0x6>
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	9a 83       	std	Y+2, r25	; 0x02
 2b2:	89 83       	std	Y+1, r24	; 0x01
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <_ZN7KeyMemoC1Ei>:
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <_ZN7KeyMemoC1Ei+0x6>
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <_ZN7KeyMemoC1Ei+0x8>
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	9a 83       	std	Y+2, r25	; 0x02
 2cc:	89 83       	std	Y+1, r24	; 0x01
 2ce:	7c 83       	std	Y+4, r23	; 0x04
 2d0:	6b 83       	std	Y+3, r22	; 0x03
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	9a 81       	ldd	r25, Y+2	; 0x02
 2d6:	0e 94 2a 01 	call	0x254	; 0x254 <_ZN7KeyItemC1Ev>
 2da:	2b 81       	ldd	r18, Y+3	; 0x03
 2dc:	89 81       	ldd	r24, Y+1	; 0x01
 2de:	9a 81       	ldd	r25, Y+2	; 0x02
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	9a 81       	ldd	r25, Y+2	; 0x02
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e8:	22 e0       	ldi	r18, 0x02	; 2
 2ea:	fc 01       	movw	r30, r24
 2ec:	21 83       	std	Z+1, r18	; 0x01
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <_ZN8KeyCleanC1Ev>:
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	00 d0       	rcall	.+0      	; 0x302 <_ZN8KeyCleanC1Ev+0x6>
 302:	cd b7       	in	r28, 0x3d	; 61
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 304:	de b7       	in	r29, 0x3e	; 62
 306:	9a 83       	std	Y+2, r25	; 0x02
 308:	89 83       	std	Y+1, r24	; 0x01
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	9a 81       	ldd	r25, Y+2	; 0x02
 30e:	0e 94 2a 01 	call	0x254	; 0x254 <_ZN7KeyItemC1Ev>
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	9a 81       	ldd	r25, Y+2	; 0x02
 316:	fc 01       	movw	r30, r24
 318:	10 82       	st	Z, r1
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	9a 81       	ldd	r25, Y+2	; 0x02
 31e:	23 e0       	ldi	r18, 0x03	; 3
 320:	fc 01       	movw	r30, r24
 322:	21 83       	std	Z+1, r18	; 0x01
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <_ZN9KeyResultC1Ev>:
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
	_delay_ms(5);
	WriteByte(0x28);
 332:	00 d0       	rcall	.+0      	; 0x334 <_ZN9KeyResultC1Ev+0x6>
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	9a 83       	std	Y+2, r25	; 0x02
 33a:	89 83       	std	Y+1, r24	; 0x01
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	9a 81       	ldd	r25, Y+2	; 0x02
 340:	0e 94 2a 01 	call	0x254	; 0x254 <_ZN7KeyItemC1Ev>
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	9a 81       	ldd	r25, Y+2	; 0x02
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 348:	fc 01       	movw	r30, r24
 34a:	10 82       	st	Z, r1
 34c:	89 81       	ldd	r24, Y+1	; 0x01
 34e:	9a 81       	ldd	r25, Y+2	; 0x02
 350:	24 e0       	ldi	r18, 0x04	; 4
 352:	fc 01       	movw	r30, r24
 354:	21 83       	std	Z+1, r18	; 0x01
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <_ZN9KeyNumberC1Ei>:
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	00 d0       	rcall	.+0      	; 0x366 <_ZN9KeyNumberC1Ei+0x6>
 366:	00 d0       	rcall	.+0      	; 0x368 <_ZN9KeyNumberC1Ei+0x8>
	if (__tmp < 1.0)
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
 36c:	9a 83       	std	Y+2, r25	; 0x02
 36e:	89 83       	std	Y+1, r24	; 0x01
 370:	7c 83       	std	Y+4, r23	; 0x04
 372:	6b 83       	std	Y+3, r22	; 0x03
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	9a 81       	ldd	r25, Y+2	; 0x02
 378:	0e 94 2a 01 	call	0x254	; 0x254 <_ZN7KeyItemC1Ev>
 37c:	2b 81       	ldd	r18, Y+3	; 0x03
 37e:	89 81       	ldd	r24, Y+1	; 0x01
		__ticks = 1;
 380:	9a 81       	ldd	r25, Y+2	; 0x02
 382:	fc 01       	movw	r30, r24
 384:	20 83       	st	Z, r18
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	9a 81       	ldd	r25, Y+2	; 0x02
	else if (__tmp > 65535)
 38a:	25 e0       	ldi	r18, 0x05	; 5
 38c:	fc 01       	movw	r30, r24
 38e:	21 83       	std	Z+1, r18	; 0x01
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <_ZN18KeyboardControllerC1Ev>:
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3a2:	00 d0       	rcall	.+0      	; 0x3a4 <_ZN18KeyboardControllerC1Ev+0x6>
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	9a 83       	std	Y+2, r25	; 0x02
 3aa:	89 83       	std	Y+1, r24	; 0x01
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <_ZN18KeyboardControllerD1Ev>:
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	00 d0       	rcall	.+0      	; 0x3bc <_ZN18KeyboardControllerD1Ev+0x6>
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	9a 83       	std	Y+2, r25	; 0x02
 3c2:	89 83       	std	Y+1, r24	; 0x01
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <_ZN18KeyboardController11setKeyValueEi>:
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	00 d0       	rcall	.+0      	; 0x3d4 <_ZN18KeyboardController11setKeyValueEi+0x6>
 3d4:	00 d0       	rcall	.+0      	; 0x3d6 <_ZN18KeyboardController11setKeyValueEi+0x8>
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
 3da:	9a 83       	std	Y+2, r25	; 0x02
 3dc:	89 83       	std	Y+1, r24	; 0x01
 3de:	7c 83       	std	Y+4, r23	; 0x04
 3e0:	6b 83       	std	Y+3, r22	; 0x03
 3e2:	8b 81       	ldd	r24, Y+3	; 0x03
 3e4:	9c 81       	ldd	r25, Y+4	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3e6:	90 93 fe 00 	sts	0x00FE, r25
 3ea:	80 93 fd 00 	sts	0x00FD, r24
 3ee:	0f 90       	pop	r0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <_ZN18KeyboardController21readValueFromKeyboardEv>:
 3fc:	0f 93       	push	r16
 3fe:	1f 93       	push	r17
 400:	cf 93       	push	r28
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 402:	df 93       	push	r29
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
 408:	2e 97       	sbiw	r28, 0x0e	; 14
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	f8 94       	cli
 40e:	de bf       	out	0x3e, r29	; 62
 410:	0f be       	out	0x3f, r0	; 63
 412:	cd bf       	out	0x3d, r28	; 61
 414:	9e 87       	std	Y+14, r25	; 0x0e
 416:	8d 87       	std	Y+13, r24	; 0x0d
 418:	80 91 fd 00 	lds	r24, 0x00FD
 41c:	90 91 fe 00 	lds	r25, 0x00FE
 420:	84 30       	cpi	r24, 0x04	; 4
 422:	91 05       	cpc	r25, r1
 424:	21 f0       	breq	.+8      	; 0x42e <_ZN18KeyboardController21readValueFromKeyboardEv+0x32>
 426:	8d 85       	ldd	r24, Y+13	; 0x0d
 428:	9e 85       	ldd	r25, Y+14	; 0x0e
 42a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN18KeyboardController14initOperatorIdEv>
 42e:	80 91 fd 00 	lds	r24, 0x00FD
	_delay_ms(5);
	WriteByte(0x08);
 432:	90 91 fe 00 	lds	r25, 0x00FE
 436:	84 30       	cpi	r24, 0x04	; 4
 438:	91 05       	cpc	r25, r1
 43a:	a1 f4       	brne	.+40     	; 0x464 <_ZN18KeyboardController21readValueFromKeyboardEv+0x68>
 43c:	8d 85       	ldd	r24, Y+13	; 0x0d
 43e:	9e 85       	ldd	r25, Y+14	; 0x0e
 440:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN18KeyboardController15getNextOperatorEv>
 444:	8e 59       	subi	r24, 0x9E	; 158
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 446:	9f 4f       	sbci	r25, 0xFF	; 255
 448:	fc 01       	movw	r30, r24
 44a:	20 81       	ld	r18, Z
 44c:	ce 01       	movw	r24, r28
 44e:	0b 96       	adiw	r24, 0x0b	; 11
 450:	62 2f       	mov	r22, r18
 452:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN11KeyOperatorC1Ec>
 456:	0b 85       	ldd	r16, Y+11	; 0x0b
 458:	1c 85       	ldd	r17, Y+12	; 0x0c
 45a:	ce 01       	movw	r24, r28
 45c:	0b 96       	adiw	r24, 0x0b	; 11
 45e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_ZN11KeyOperatorD1Ev>
 462:	7c c0       	rjmp	.+248    	; 0x55c <_ZN18KeyboardController21readValueFromKeyboardEv+0x160>
 464:	80 91 fd 00 	lds	r24, 0x00FD
 468:	90 91 fe 00 	lds	r25, 0x00FE
 46c:	83 70       	andi	r24, 0x03	; 3
	if (__tmp < 1.0)
 46e:	99 27       	eor	r25, r25
 470:	00 97       	sbiw	r24, 0x00	; 0
 472:	a1 f4       	brne	.+40     	; 0x49c <_ZN18KeyboardController21readValueFromKeyboardEv+0xa0>
 474:	80 91 fd 00 	lds	r24, 0x00FD
 478:	90 91 fe 00 	lds	r25, 0x00FE
 47c:	99 23       	and	r25, r25
 47e:	0c f4       	brge	.+2      	; 0x482 <_ZN18KeyboardController21readValueFromKeyboardEv+0x86>
 480:	03 96       	adiw	r24, 0x03	; 3
 482:	95 95       	asr	r25
 484:	87 95       	ror	r24
 486:	95 95       	asr	r25
 488:	87 95       	ror	r24
 48a:	9c 01       	movw	r18, r24
		__ticks = 1;
 48c:	ce 01       	movw	r24, r28
 48e:	09 96       	adiw	r24, 0x09	; 9
 490:	b9 01       	movw	r22, r18
 492:	0e 94 5f 01 	call	0x2be	; 0x2be <_ZN7KeyMemoC1Ei>
 496:	09 85       	ldd	r16, Y+9	; 0x09
 498:	1a 85       	ldd	r17, Y+10	; 0x0a
 49a:	60 c0       	rjmp	.+192    	; 0x55c <_ZN18KeyboardController21readValueFromKeyboardEv+0x160>
 49c:	80 91 fd 00 	lds	r24, 0x00FD
	else if (__tmp > 65535)
 4a0:	90 91 fe 00 	lds	r25, 0x00FE
 4a4:	8d 30       	cpi	r24, 0x0D	; 13
 4a6:	91 05       	cpc	r25, r1
 4a8:	39 f4       	brne	.+14     	; 0x4b8 <_ZN18KeyboardController21readValueFromKeyboardEv+0xbc>
 4aa:	ce 01       	movw	r24, r28
 4ac:	07 96       	adiw	r24, 0x07	; 7
 4ae:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_ZN8KeyCleanC1Ev>
 4b2:	0f 81       	ldd	r16, Y+7	; 0x07
 4b4:	18 85       	ldd	r17, Y+8	; 0x08
 4b6:	52 c0       	rjmp	.+164    	; 0x55c <_ZN18KeyboardController21readValueFromKeyboardEv+0x160>
 4b8:	80 91 fd 00 	lds	r24, 0x00FD
 4bc:	90 91 fe 00 	lds	r25, 0x00FE
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4c0:	8f 30       	cpi	r24, 0x0F	; 15
 4c2:	91 05       	cpc	r25, r1
 4c4:	39 f4       	brne	.+14     	; 0x4d4 <_ZN18KeyboardController21readValueFromKeyboardEv+0xd8>
 4c6:	ce 01       	movw	r24, r28
 4c8:	05 96       	adiw	r24, 0x05	; 5
 4ca:	0e 94 97 01 	call	0x32e	; 0x32e <_ZN9KeyResultC1Ev>
 4ce:	0d 81       	ldd	r16, Y+5	; 0x05
 4d0:	1e 81       	ldd	r17, Y+6	; 0x06
 4d2:	44 c0       	rjmp	.+136    	; 0x55c <_ZN18KeyboardController21readValueFromKeyboardEv+0x160>
 4d4:	80 e3       	ldi	r24, 0x30	; 48
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	9a 83       	std	Y+2, r25	; 0x02
 4da:	89 83       	std	Y+1, r24	; 0x01
 4dc:	80 91 fd 00 	lds	r24, 0x00FD
 4e0:	90 91 fe 00 	lds	r25, 0x00FE
 4e4:	84 30       	cpi	r24, 0x04	; 4
 4e6:	91 05       	cpc	r25, r1
 4e8:	5c f4       	brge	.+22     	; 0x500 <_ZN18KeyboardController21readValueFromKeyboardEv+0x104>
 4ea:	80 91 fd 00 	lds	r24, 0x00FD
 4ee:	90 91 fe 00 	lds	r25, 0x00FE
 4f2:	29 81       	ldd	r18, Y+1	; 0x01
 4f4:	3a 81       	ldd	r19, Y+2	; 0x02
 4f6:	82 0f       	add	r24, r18
 4f8:	93 1f       	adc	r25, r19
 4fa:	9a 83       	std	Y+2, r25	; 0x02
 4fc:	89 83       	std	Y+1, r24	; 0x01
 4fe:	25 c0       	rjmp	.+74     	; 0x54a <_ZN18KeyboardController21readValueFromKeyboardEv+0x14e>
 500:	80 91 fd 00 	lds	r24, 0x00FD
 504:	90 91 fe 00 	lds	r25, 0x00FE
 508:	88 30       	cpi	r24, 0x08	; 8
 50a:	91 05       	cpc	r25, r1
 50c:	64 f4       	brge	.+24     	; 0x526 <_ZN18KeyboardController21readValueFromKeyboardEv+0x12a>
 50e:	80 91 fd 00 	lds	r24, 0x00FD
 512:	90 91 fe 00 	lds	r25, 0x00FE
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	29 81       	ldd	r18, Y+1	; 0x01
 51a:	3a 81       	ldd	r19, Y+2	; 0x02
 51c:	82 0f       	add	r24, r18
 51e:	93 1f       	adc	r25, r19
 520:	9a 83       	std	Y+2, r25	; 0x02
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 522:	89 83       	std	Y+1, r24	; 0x01
 524:	12 c0       	rjmp	.+36     	; 0x54a <_ZN18KeyboardController21readValueFromKeyboardEv+0x14e>
 526:	80 91 fd 00 	lds	r24, 0x00FD
 52a:	90 91 fe 00 	lds	r25, 0x00FE
 52e:	8c 30       	cpi	r24, 0x0C	; 12
 530:	91 05       	cpc	r25, r1
 532:	5c f4       	brge	.+22     	; 0x54a <_ZN18KeyboardController21readValueFromKeyboardEv+0x14e>
 534:	80 91 fd 00 	lds	r24, 0x00FD
 538:	90 91 fe 00 	lds	r25, 0x00FE
 53c:	02 97       	sbiw	r24, 0x02	; 2
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 53e:	29 81       	ldd	r18, Y+1	; 0x01
 540:	3a 81       	ldd	r19, Y+2	; 0x02
 542:	82 0f       	add	r24, r18
 544:	93 1f       	adc	r25, r19
 546:	9a 83       	std	Y+2, r25	; 0x02
 548:	89 83       	std	Y+1, r24	; 0x01
 54a:	29 81       	ldd	r18, Y+1	; 0x01
 54c:	3a 81       	ldd	r19, Y+2	; 0x02
 54e:	ce 01       	movw	r24, r28
 550:	03 96       	adiw	r24, 0x03	; 3
 552:	b9 01       	movw	r22, r18
 554:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN9KeyNumberC1Ei>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 558:	0b 81       	ldd	r16, Y+3	; 0x03
 55a:	1c 81       	ldd	r17, Y+4	; 0x04
 55c:	c8 01       	movw	r24, r16
 55e:	2e 96       	adiw	r28, 0x0e	; 14
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	f8 94       	cli
 564:	de bf       	out	0x3e, r29	; 62
 566:	0f be       	out	0x3f, r0	; 63
 568:	cd bf       	out	0x3d, r28	; 61
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	1f 91       	pop	r17
 570:	0f 91       	pop	r16
 572:	08 95       	ret

00000574 <_ZN18KeyboardController15getNextOperatorEv>:
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	00 d0       	rcall	.+0      	; 0x57a <_ZN18KeyboardController15getNextOperatorEv+0x6>
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62
 57e:	9a 83       	std	Y+2, r25	; 0x02
 580:	89 83       	std	Y+1, r24	; 0x01
 582:	80 91 fb 00 	lds	r24, 0x00FB
 586:	90 91 fc 00 	lds	r25, 0x00FC
 58a:	01 96       	adiw	r24, 0x01	; 1
 58c:	90 93 fc 00 	sts	0x00FC, r25
 590:	80 93 fb 00 	sts	0x00FB, r24
 594:	80 91 fb 00 	lds	r24, 0x00FB
 598:	90 91 fc 00 	lds	r25, 0x00FC
 59c:	83 70       	andi	r24, 0x03	; 3
 59e:	90 78       	andi	r25, 0x80	; 128
 5a0:	99 23       	and	r25, r25
 5a2:	24 f4       	brge	.+8      	; 0x5ac <_ZN18KeyboardController15getNextOperatorEv+0x38>
 5a4:	01 97       	sbiw	r24, 0x01	; 1
 5a6:	8c 6f       	ori	r24, 0xFC	; 252
 5a8:	9f 6f       	ori	r25, 0xFF	; 255
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
	_delay_ms(5);
	WriteByte(0x01);
 5b4:	08 95       	ret

000005b6 <_ZN18KeyboardController14initOperatorIdEv>:
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	00 d0       	rcall	.+0      	; 0x5bc <_ZN18KeyboardController14initOperatorIdEv+0x6>
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
 5c0:	9a 83       	std	Y+2, r25	; 0x02
 5c2:	89 83       	std	Y+1, r24	; 0x01
 5c4:	83 e0       	ldi	r24, 0x03	; 3
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	90 93 fc 00 	sts	0x00FC, r25
 5cc:	80 93 fb 00 	sts	0x00FB, r24
 5d0:	0f 90       	pop	r0
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 5d2:	0f 90       	pop	r0
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <_Z8schedulev>:
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	00 d0       	rcall	.+0      	; 0x5e0 <_Z8schedulev+0x6>
 5e0:	cd b7       	in	r28, 0x3d	; 61
 5e2:	de b7       	in	r29, 0x3e	; 62
 5e4:	1a 82       	std	Y+2, r1	; 0x02
 5e6:	19 82       	std	Y+1, r1	; 0x01
 5e8:	8e c0       	rjmp	.+284    	; 0x706 <_Z8schedulev+0x12c>
 5ea:	29 81       	ldd	r18, Y+1	; 0x01
 5ec:	3a 81       	ldd	r19, Y+2	; 0x02
 5ee:	c9 01       	movw	r24, r18
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	82 1b       	sub	r24, r18
 5fe:	93 0b       	sbc	r25, r19
 600:	8f 5f       	subi	r24, 0xFF	; 255
	if (__tmp < 1.0)
 602:	9e 4f       	sbci	r25, 0xFE	; 254
 604:	fc 01       	movw	r30, r24
 606:	80 81       	ld	r24, Z
 608:	91 81       	ldd	r25, Z+1	; 0x01
 60a:	00 97       	sbiw	r24, 0x00	; 0
 60c:	09 f4       	brne	.+2      	; 0x610 <_Z8schedulev+0x36>
 60e:	76 c0       	rjmp	.+236    	; 0x6fc <_Z8schedulev+0x122>
 610:	29 81       	ldd	r18, Y+1	; 0x01
 612:	3a 81       	ldd	r19, Y+2	; 0x02
 614:	c9 01       	movw	r24, r18
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
		__ticks = 1;
 622:	82 1b       	sub	r24, r18
 624:	93 0b       	sbc	r25, r19
 626:	8f 5f       	subi	r24, 0xFF	; 255
 628:	9e 4f       	sbci	r25, 0xFE	; 254
 62a:	fc 01       	movw	r30, r24
 62c:	80 81       	ld	r24, Z
 62e:	91 81       	ldd	r25, Z+1	; 0x01
 630:	ac 01       	movw	r20, r24
 632:	41 50       	subi	r20, 0x01	; 1
	else if (__tmp > 65535)
 634:	51 09       	sbc	r21, r1
 636:	29 81       	ldd	r18, Y+1	; 0x01
 638:	3a 81       	ldd	r19, Y+2	; 0x02
 63a:	c9 01       	movw	r24, r18
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	82 1b       	sub	r24, r18
 64a:	93 0b       	sbc	r25, r19
 64c:	8f 5f       	subi	r24, 0xFF	; 255
 64e:	9e 4f       	sbci	r25, 0xFE	; 254
 650:	fc 01       	movw	r30, r24
 652:	51 83       	std	Z+1, r21	; 0x01
 654:	40 83       	st	Z, r20
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 656:	29 81       	ldd	r18, Y+1	; 0x01
 658:	3a 81       	ldd	r19, Y+2	; 0x02
 65a:	c9 01       	movw	r24, r18
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	88 0f       	add	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	82 1b       	sub	r24, r18
 66a:	93 0b       	sbc	r25, r19
 66c:	8f 5f       	subi	r24, 0xFF	; 255
 66e:	9e 4f       	sbci	r25, 0xFE	; 254
 670:	fc 01       	movw	r30, r24
 672:	80 81       	ld	r24, Z
 674:	91 81       	ldd	r25, Z+1	; 0x01
 676:	00 97       	sbiw	r24, 0x00	; 0
 678:	09 f0       	breq	.+2      	; 0x67c <_Z8schedulev+0xa2>
 67a:	40 c0       	rjmp	.+128    	; 0x6fc <_Z8schedulev+0x122>
 67c:	29 81       	ldd	r18, Y+1	; 0x01
 67e:	3a 81       	ldd	r19, Y+2	; 0x02
 680:	c9 01       	movw	r24, r18
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	88 0f       	add	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	82 1b       	sub	r24, r18
 690:	93 0b       	sbc	r25, r19
 692:	8b 5f       	subi	r24, 0xFB	; 251
 694:	9e 4f       	sbci	r25, 0xFE	; 254
 696:	fc 01       	movw	r30, r24
 698:	80 81       	ld	r24, Z
 69a:	48 2f       	mov	r20, r24
 69c:	4f 5f       	subi	r20, 0xFF	; 255
 69e:	29 81       	ldd	r18, Y+1	; 0x01
 6a0:	3a 81       	ldd	r19, Y+2	; 0x02
 6a2:	c9 01       	movw	r24, r18
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	82 1b       	sub	r24, r18
 6b2:	93 0b       	sbc	r25, r19
 6b4:	8b 5f       	subi	r24, 0xFB	; 251
 6b6:	9e 4f       	sbci	r25, 0xFE	; 254
 6b8:	fc 01       	movw	r30, r24
 6ba:	40 83       	st	Z, r20
 6bc:	29 81       	ldd	r18, Y+1	; 0x01
 6be:	3a 81       	ldd	r19, Y+2	; 0x02
 6c0:	c9 01       	movw	r24, r18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	88 0f       	add	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	82 1b       	sub	r24, r18
 6d0:	93 0b       	sbc	r25, r19
 6d2:	8d 5f       	subi	r24, 0xFD	; 253
 6d4:	9e 4f       	sbci	r25, 0xFE	; 254
 6d6:	fc 01       	movw	r30, r24
 6d8:	40 81       	ld	r20, Z
 6da:	51 81       	ldd	r21, Z+1	; 0x01
 6dc:	29 81       	ldd	r18, Y+1	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6de:	3a 81       	ldd	r19, Y+2	; 0x02
 6e0:	c9 01       	movw	r24, r18
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	88 0f       	add	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	82 1b       	sub	r24, r18
 6f0:	93 0b       	sbc	r25, r19
 6f2:	8f 5f       	subi	r24, 0xFF	; 255
 6f4:	9e 4f       	sbci	r25, 0xFE	; 254
 6f6:	fc 01       	movw	r30, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6f8:	51 83       	std	Z+1, r21	; 0x01
 6fa:	40 83       	st	Z, r20
 6fc:	89 81       	ldd	r24, Y+1	; 0x01
 6fe:	9a 81       	ldd	r25, Y+2	; 0x02
 700:	01 96       	adiw	r24, 0x01	; 1
 702:	9a 83       	std	Y+2, r25	; 0x02
 704:	89 83       	std	Y+1, r24	; 0x01
 706:	80 91 45 01 	lds	r24, 0x0145
 70a:	90 91 46 01 	lds	r25, 0x0146
 70e:	41 e0       	ldi	r20, 0x01	; 1
 710:	29 81       	ldd	r18, Y+1	; 0x01
 712:	3a 81       	ldd	r19, Y+2	; 0x02
 714:	28 17       	cp	r18, r24
 716:	39 07       	cpc	r19, r25
 718:	0c f0       	brlt	.+2      	; 0x71c <_Z8schedulev+0x142>
 71a:	40 e0       	ldi	r20, 0x00	; 0
 71c:	44 23       	and	r20, r20
 71e:	09 f0       	breq	.+2      	; 0x722 <_Z8schedulev+0x148>
 720:	64 cf       	rjmp	.-312    	; 0x5ea <_Z8schedulev+0x10>
 722:	0f 90       	pop	r0
 724:	0f 90       	pop	r0
 726:	df 91       	pop	r29
 728:	cf 91       	pop	r28
 72a:	08 95       	ret

0000072c <__vector_10>:
 72c:	1f 92       	push	r1
 72e:	0f 92       	push	r0
 730:	00 90 5f 00 	lds	r0, 0x005F
 734:	0f 92       	push	r0
 736:	11 24       	eor	r1, r1
 738:	2f 93       	push	r18
 73a:	3f 93       	push	r19
 73c:	4f 93       	push	r20
 73e:	5f 93       	push	r21
 740:	6f 93       	push	r22
 742:	7f 93       	push	r23
 744:	8f 93       	push	r24
 746:	9f 93       	push	r25
 748:	af 93       	push	r26
 74a:	bf 93       	push	r27
 74c:	ef 93       	push	r30
 74e:	ff 93       	push	r31
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	cd b7       	in	r28, 0x3d	; 61
	_delay_ms(5);
	WriteByte(0x06);
 756:	de b7       	in	r29, 0x3e	; 62
 758:	0e 94 ed 02 	call	0x5da	; 0x5da <_Z8schedulev>
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
 760:	ff 91       	pop	r31
 762:	ef 91       	pop	r30
 764:	bf 91       	pop	r27
 766:	af 91       	pop	r26
 768:	9f 91       	pop	r25
 76a:	8f 91       	pop	r24
 76c:	7f 91       	pop	r23
 76e:	6f 91       	pop	r22
 770:	5f 91       	pop	r21
 772:	4f 91       	pop	r20
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 774:	3f 91       	pop	r19
 776:	2f 91       	pop	r18
 778:	0f 90       	pop	r0
 77a:	00 92 5f 00 	sts	0x005F, r0
 77e:	0f 90       	pop	r0
 780:	1f 90       	pop	r1
 782:	18 95       	reti

00000784 <_exit>:
 784:	f8 94       	cli

00000786 <__stop_program>:
 786:	ff cf       	rjmp	.-2      	; 0x786 <__stop_program>
